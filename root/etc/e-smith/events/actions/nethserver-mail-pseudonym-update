#!/usr/bin/perl

#
# nethserver-mail-pseudonym-update
#
# Keep synchronized pseudonyms and ldap mail attribute
#

#
# Copyright (C) 2012 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

use esmith::AccountsDB;
use NethServer::Directory;
use NethServer::MailServer;
use strict;

my $event = shift || die("Missing event name argument");
my $accountsDb = esmith::AccountsDB->open() || die('Could not open AccountsDB');
my $nsDirectory = NethServer::Directory->new();
my $mailServer = NethServer::MailServer->new();

my $pseudonym = shift;
my $pseudonymRecord = $accountsDb->get($pseudonym);


if (! defined $pseudonymRecord || $pseudonymRecord->prop('type') !~ /^pseudonym(-deleted)?$/) {
    die('[ERROR] Invalid pseudonym record: ' . $pseudonym);
}

my $account = $pseudonymRecord->prop('Account');

if( ! $account ) {
    warn('[INFO] Missing Account relation in pseudonym record ' . $pseudonym . "... skipped.\n");
    exit(0);
}


my @aliases = $mailServer->pseudonymToAddresses($pseudonym);
my @updateNodes = ();

if(@aliases) {
@updateNodes = $nsDirectory->search(
    base => 'ou=People,dc=directory,dc=nh',
    filter => sprintf('(&(!(uid=%s))(|(mail=%s)))', $account,  join(')(mail=', @aliases)),
    scope => 'one',
    )->entries;
}

foreach(@updateNodes) {
    my @mailValues = @{$_->get_value('mail', asref => 1)};
    # purge any alias matching with our expanded pseudonym:
    warn("[INFO] initial mail values: " . join(', ', @mailValues). "; aliases: "  . join(", ", @aliases)  . "\n");
    foreach my $removeAlias (@aliases) {
	@mailValues = grep { $_ ne $removeAlias } @mailValues;
    }
    warn("[INFO] new mail Values for " . $_->dn() . ": " .join(', ', @mailValues) . "\n");
    $_->replace(mail => (@mailValues ? \@mailValues : ''));
    $_->update($nsDirectory);
}

my $ldapEntry = $nsDirectory->getUser($account);

# Update the LDAP entry with the new address list:
if($ldapEntry) {
    my @newAddresses = $mailServer->getAccountMailAddresses($account);
    $ldapEntry->replace(mail => (@newAddresses ? \@newAddresses : ''));
    warn("[INFO] new mail Values for " . $ldapEntry->dn() . ": " .join(', ', @newAddresses) . "\n");
    $ldapEntry->update($nsDirectory);
}

exit 0;
